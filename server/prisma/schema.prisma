// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  username          String    @unique
  passwordHash      String
  createdAt         DateTime  @default(now())
  Item              Item[]
  Token             Token[]
  comments          Comment[] @relation("user") // 내가 쓴 댓글
  mentionedComments Comment[] @relation("mentionUser") // 내가 언급된 댓글
}

model Token {
  id              Int      @id @default(autoincrement())
  rotationCounter Int      @default(1)
  user            User     @relation(fields: [userId], references: [id])
  userId          Int
  createdAt       DateTime @default(now())
  blocked         Boolean  @default(false)
}

model Item {
  id          Int        @id @default(autoincrement())
  title       String
  body        String
  author      String     @default("")
  link        String?
  thumbnail   String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  publisher   Publisher  @relation(fields: [publisherId], references: [id], onDelete: Cascade)
  publisherId Int
  itemTags    ItemTags[]
  ItemStats   ItemStats? // Item의 추가 정보
  itemLikes   ItemLike[] // 좋아요
  comments    Comment[]

  @@index([createdAt(sort: Desc)])
}

model Publisher {
  id      Int     @id @default(autoincrement())
  name    String
  favicon String?
  domain  String  @unique
  Item    Item[]
}

model Tag {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  ItemTags ItemTags[]
}

model ItemTags {
  item   Item @relation(fields: [itemId], references: [id])
  itemId Int
  tag    Tag  @relation(fields: [tagId], references: [id])
  tagId  Int

  @@id([itemId, tagId])
  @@index(tagId)
  @@index(itemId)
}

model TagRelation {
  id            Int @id @default(autoincrement())
  tagId         Int
  originalTagId Int

  @@index(tagId)
  @@index(originalTagId)
}

model ItemLike {
  id        Int      @id @default(autoincrement())
  itemId    Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([itemId, userId])
  @@index(itemId)
}

model ItemStats {
  id            Int      @id @default(autoincrement())
  likes         Int      @default(0)
  clicks        Int      @default(0)
  score         Int      @default(0)
  commentsCount Int      @default(0)
  item          Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId        Int      @unique // Item과 1:1 관계
  updatedAt     DateTime @default(now()) @updatedAt
}

model Comment {
  id               Int           @id @default(autoincrement())
  text             String
  likes            Int           @default(0) // 좋아요 개수
  subcommentsCount Int           @default(0) // 대댓글 개수
  parentCommentId  Int? // 대댓글일 경우 부모 댓글의 id
  item             Item          @relation(fields: [itemId], references: [id])
  user             User          @relation("user", fields: [userId], references: [id])
  mentionUser      User?         @relation("mentionUser", fields: [mentionUserId], references: [id])
  itemId           Int
  userId           Int
  mentionUserId    Int? // 언급한 유저 ID
  commentLikes     CommentLike[]
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  deletedAt        DateTime? // 삭제된 시간

  @@index(createdAt)
  @@index(deletedAt)
  @@index(parentCommentId)
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  commentId Int
  userId    Int
  Comment   Comment  @relation(fields: [commentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, commentId])
  @@index(commentId)
}
